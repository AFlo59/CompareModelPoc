#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üõ†Ô∏è Script de d√©veloppement automatis√© - DnD AI GameMaster
Simplifie toutes les t√¢ches de d√©veloppement local.
"""

import argparse
import os
import subprocess
import sys
from pathlib import Path
import shutil
import webbrowser
import time


class Colors:
    """Couleurs pour les messages console."""
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'


def print_header(text: str):
    """Affiche un en-t√™te color√©."""
    print(f"\n{Colors.HEADER}{Colors.BOLD}üöÄ {text}{Colors.ENDC}")


def print_success(text: str):
    """Affiche un message de succ√®s."""
    print(f"{Colors.OKGREEN}‚úÖ {text}{Colors.ENDC}")


def print_warning(text: str):
    """Affiche un avertissement."""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {text}{Colors.ENDC}")


def print_error(text: str):
    """Affiche une erreur."""
    print(f"{Colors.FAIL}‚ùå {text}{Colors.ENDC}")


def run_command(cmd: str, cwd: str = None, check: bool = True) -> subprocess.CompletedProcess:
    """Ex√©cute une commande shell."""
    print(f"{Colors.OKCYAN}‚ñ∂Ô∏è  {cmd}{Colors.ENDC}")
    try:
        result = subprocess.run(
            cmd, 
            shell=True, 
            cwd=cwd, 
            check=check, 
            capture_output=True, 
            text=True
        )
        if result.stdout:
            print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"Commande √©chou√©e: {e}")
        if e.stderr:
            print(e.stderr)
        if check:
            sys.exit(1)
        return e


def check_python_version():
    """V√©rifie la version Python."""
    if sys.version_info < (3, 10):
        print_error("Python 3.10+ requis")
        sys.exit(1)
    print_success(f"Python {sys.version.split()[0]} ‚úì")


def check_venv():
    """V√©rifie si l'environnement virtuel est actif."""
    if hasattr(sys, 'real_prefix') or (hasattr(sys, 'base_prefix') and sys.base_prefix != sys.prefix):
        print_success("Environnement virtuel actif ‚úì")
        return True
    else:
        print_warning("Environnement virtuel non d√©tect√©")
        return False


def setup_environment():
    """Configure l'environnement de d√©veloppement."""
    print_header("Configuration de l'environnement")
    
    check_python_version()
    
    # Cr√©er venv si n√©cessaire
    if not Path("venv").exists():
        print("Cr√©ation de l'environnement virtuel...")
        run_command("python -m venv venv")
        print_success("Environnement virtuel cr√©√©")
    
    # V√©rifier activation
    if not check_venv():
        if os.name == 'nt':  # Windows
            print("Pour activer l'environnement virtuel:")
            print(f"{Colors.OKCYAN}venv\\Scripts\\activate{Colors.ENDC}")
        else:  # Linux/Mac
            print("Pour activer l'environnement virtuel:")
            print(f"{Colors.OKCYAN}source venv/bin/activate{Colors.ENDC}")
        return False
    
    # Installer les d√©pendances
    print("Installation des d√©pendances...")
    run_command("pip install -r requirements.txt")
    
    # Installer les outils de d√©veloppement
    if Path("dev-requirements.txt").exists():
        run_command("pip install -r dev-requirements.txt")
    else:
        print("Installation des outils de d√©veloppement...")
        dev_tools = [
            "black>=23.0.0",
            "isort>=5.12.0", 
            "flake8>=6.0.0",
            "mypy>=1.0.0",
            "pytest-cov>=4.0.0",
            "pre-commit>=3.0.0"
        ]
        run_command(f"pip install {' '.join(dev_tools)}")
    
    print_success("Environnement configur√© avec succ√®s !")
    return True


def run_tests(coverage: bool = True, verbose: bool = True):
    """Lance la suite de tests."""
    print_header("Ex√©cution des tests")
    
    cmd = "python -m pytest tests/"
    if verbose:
        cmd += " -v"
    if coverage:
        cmd += " --cov=src --cov-report=html --cov-report=term-missing"
    
    result = run_command(cmd, check=False)
    
    if result.returncode == 0:
        print_success("Tous les tests passent !")
        if coverage and Path("htmlcov/index.html").exists():
            print(f"{Colors.OKBLUE}üìä Rapport de couverture: htmlcov/index.html{Colors.ENDC}")
    else:
        print_error(f"Tests √©chou√©s (code: {result.returncode})")


def run_quality_checks():
    """Lance les v√©rifications de qualit√© de code."""
    print_header("V√©rifications de qualit√©")
    
    checks = [
        ("Black (formatage)", "black --check --diff src/ tests/"),
        ("isort (imports)", "isort --check-only --diff src/ tests/"),
        ("flake8 (linting)", "flake8 src/ tests/"),
        ("mypy (types)", "mypy src/ --ignore-missing-imports")
    ]
    
    results = []
    for name, cmd in checks:
        print(f"\n{Colors.OKBLUE}üîç {name}...{Colors.ENDC}")
        result = run_command(cmd, check=False)
        results.append((name, result.returncode == 0))
    
    print(f"\n{Colors.BOLD}üìã R√©sum√© des v√©rifications:{Colors.ENDC}")
    for name, success in results:
        status = "‚úÖ" if success else "‚ùå"
        print(f"  {status} {name}")
    
    if all(success for _, success in results):
        print_success("Toutes les v√©rifications passent !")
    else:
        print_warning("Certaines v√©rifications ont √©chou√©")


def fix_code_style():
    """Corrige automatiquement le style de code."""
    print_header("Correction automatique du style")
    
    print("Formatage avec Black...")
    run_command("black src/ tests/")
    
    print("Organisation des imports avec isort...")
    run_command("isort src/ tests/")
    
    print_success("Style de code corrig√© !")


def run_app(mode: str = "legacy"):
    """Lance l'application."""
    print_header(f"Lancement de l'application ({mode})")
    
    # V√©rifier les fichiers requis
    if Path(".env").exists():
        print_success("Fichier .env d√©tect√© ‚Äì utilisation en local")
    else:
        print_warning("Fichier .env manquant ‚Äì l'application peut fonctionner avec des fonctionnalit√©s limit√©es")
    
    if mode == "refactored" or mode == "legacy":
        app_file = "src/ui/app_legacy.py" if mode == "legacy" else "src/ui/app.py"
    else:
        app_file = "src/ui/app.py"  # Version modulaire par d√©faut
    
    if not Path(app_file).exists():
        print_error(f"Fichier d'application manquant: {app_file}")
        return
    
    print(f"D√©marrage de l'application: {app_file}")
    print(f"{Colors.OKCYAN}üåê L'application va s'ouvrir dans votre navigateur...{Colors.ENDC}")
    
    # Ouvrir le navigateur apr√®s un d√©lai
    def open_browser():
        time.sleep(3)
        webbrowser.open("http://localhost:8501")
    
    import threading
    threading.Thread(target=open_browser, daemon=True).start()
    
    # Lancer Streamlit
    run_command(f"streamlit run {app_file}")


def create_env_template():
    """Cr√©e un template de fichier .env."""
    env_content = """# üîë Configuration des cl√©s API
# Obtenez vos cl√©s sur les sites des fournisseurs

# OpenAI (requis pour GPT-4, GPT-4o, DALL-E 3)
OPENAI_API_KEY=sk-your-openai-key-here

# Anthropic (requis pour Claude 3.5 Sonnet)
ANTHROPIC_API_KEY=sk-ant-your-anthropic-key-here

# DeepSeek (optionnel - mod√®le √©conomique)
DEEPSEEK_API_KEY=sk-your-deepseek-key-here

# üîß Configuration optionnelle
# DATABASE_URL=sqlite:///database.db
# LOG_LEVEL=INFO
"""
    
    with open(".env.template", "w", encoding="utf-8") as f:
        f.write(env_content)
    
    print_success("Template .env.template cr√©√©")
    print(f"{Colors.OKBLUE}üìù Copiez .env.template vers .env et renseignez vos cl√©s API{Colors.ENDC}")


def clean_project():
    """Nettoie les fichiers temporaires."""
    print_header("Nettoyage du projet")
    
    patterns_to_clean = [
        "__pycache__",
        "*.pyc", 
        "*.pyo",
        ".pytest_cache",
        ".coverage",
        "htmlcov",
        ".mypy_cache",
        "*.egg-info",
        "dist",
        "build"
    ]
    
    for pattern in patterns_to_clean:
        if "*" in pattern:
            # Utiliser find pour les patterns
            if os.name == 'nt':  # Windows
                run_command(f'for /r . %i in ({pattern}) do @if exist "%i" rmdir /s /q "%i" 2>nul || del /q "%i" 2>nul', check=False)
            else:  # Linux/Mac
                run_command(f"find . -name '{pattern}' -type f -delete", check=False)
        else:
            # Supprimer les dossiers/fichiers directs
            for path in Path(".").rglob(pattern):
                if path.exists():
                    if path.is_dir():
                        shutil.rmtree(path, ignore_errors=True)
                    else:
                        path.unlink(missing_ok=True)
    
    print_success("Projet nettoy√© !")


def show_status():
    """Affiche le statut du projet."""
    print_header("Statut du projet DnD AI GameMaster")
    
    # Informations g√©n√©rales
    print(f"{Colors.BOLD}üìä Informations g√©n√©rales:{Colors.ENDC}")
    print(f"  ‚Ä¢ R√©pertoire: {Path.cwd()}")
    print(f"  ‚Ä¢ Python: {sys.version.split()[0]}")
    print(f"  ‚Ä¢ Environnement virtuel: {'‚úÖ' if check_venv() else '‚ùå'}")
    
    # Structure du projet
    print(f"\n{Colors.BOLD}üìÅ Structure du projet:{Colors.ENDC}")
    key_paths = [
        ("src/", "Code source principal"),
        ("tests/", "Suite de tests"),
        ("docs/", "Documentation"),
        (".env", "Configuration API"),
        ("requirements.txt", "D√©pendances")
    ]
    
    for path, description in key_paths:
        exists = "‚úÖ" if Path(path).exists() else "‚ùå"
        print(f"  {exists} {path:<20} {description}")
    
    # Tests r√©cents
    if Path(".pytest_cache").exists():
        print(f"\n{Colors.BOLD}üß™ Tests:{Colors.ENDC}")
        result = run_command("pytest --collect-only -q", check=False)
        if result.returncode == 0:
            lines = result.stdout.strip().split('\n')
            if lines:
                last_line = lines[-1]
                print(f"  üìã {last_line}")
    
    # Couverture de code
    if Path("htmlcov/index.html").exists():
        print(f"  üìä Rapport de couverture disponible: htmlcov/index.html")


def main():
    """Fonction principale du script."""
    parser = argparse.ArgumentParser(
        description="üõ†Ô∏è Script de d√©veloppement automatis√© - DnD AI GameMaster",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python dev.py setup              # Configure l'environnement
  python dev.py run               # Lance l'app (version legacy)
  python dev.py run --refactored  # Lance l'app refactoris√©e
  python dev.py test              # Lance les tests
  python dev.py test --no-coverage # Tests sans couverture
  python dev.py check             # V√©rifications qualit√©
  python dev.py fix               # Corrige le style automatiquement
  python dev.py clean             # Nettoie les fichiers temporaires
  python dev.py status            # Affiche le statut du projet
        """
    )
    
    subparsers = parser.add_subparsers(dest="command", help="Commandes disponibles")
    
    # Commande setup
    subparsers.add_parser("setup", help="Configure l'environnement de d√©veloppement")
    
    # Commande run
    run_parser = subparsers.add_parser("run", help="Lance l'application")
    run_parser.add_argument("--refactored", action="store_true", help="Utilise la version refactoris√©e")
    
    # Commande test
    test_parser = subparsers.add_parser("test", help="Lance les tests")
    test_parser.add_argument("--no-coverage", action="store_true", help="D√©sactive la couverture de code")
    test_parser.add_argument("--quiet", action="store_true", help="Mode silencieux")
    
    # Autres commandes
    subparsers.add_parser("check", help="V√©rifications de qualit√© de code")
    subparsers.add_parser("fix", help="Corrige automatiquement le style de code")
    subparsers.add_parser("clean", help="Nettoie les fichiers temporaires")
    subparsers.add_parser("status", help="Affiche le statut du projet")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    print(f"{Colors.HEADER}üé≤ DnD AI GameMaster - Script de d√©veloppement{Colors.ENDC}")
    
    try:
        if args.command == "setup":
            setup_environment()
        elif args.command == "run":
            mode = "refactored" if args.refactored else "legacy"
            run_app(mode)
        elif args.command == "test":
            coverage = not args.no_coverage
            verbose = not args.quiet
            run_tests(coverage, verbose)
        elif args.command == "check":
            run_quality_checks()
        elif args.command == "fix":
            fix_code_style()
        elif args.command == "clean":
            clean_project()
        elif args.command == "status":
            show_status()
    
    except KeyboardInterrupt:
        print_warning("\nInterrompu par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print_error(f"Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
