#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
üö¢ Script de d√©ploiement automatis√© - DnD AI GameMaster
Automatise le d√©ploiement local, Docker et production.
"""

import argparse
import os
import shutil
import subprocess
import sys
import tempfile
from datetime import datetime
from pathlib import Path

# S'assurer qu'on travaille depuis la racine du projet
script_dir = Path(__file__).parent
project_root = script_dir.parent
os.chdir(project_root)


class Colors:
    """Couleurs pour les messages console."""

    HEADER = "\033[95m"
    OKBLUE = "\033[94m"
    OKCYAN = "\033[96m"
    OKGREEN = "\033[92m"
    WARNING = "\033[93m"
    FAIL = "\033[91m"
    ENDC = "\033[0m"
    BOLD = "\033[1m"


def print_header(text: str):
    """Affiche un en-t√™te color√©."""
    print(f"\n{Colors.HEADER}{Colors.BOLD}üö¢ {text}{Colors.ENDC}")


def print_success(text: str):
    """Affiche un message de succ√®s."""
    print(f"{Colors.OKGREEN}‚úÖ {text}{Colors.ENDC}")


def print_warning(text: str):
    """Affiche un avertissement."""
    print(f"{Colors.WARNING}‚ö†Ô∏è  {text}{Colors.ENDC}")


def print_error(text: str):
    """Affiche une erreur."""
    print(f"{Colors.FAIL}‚ùå {text}{Colors.ENDC}")


def run_command(cmd: str, cwd: str = None, check: bool = True) -> subprocess.CompletedProcess:
    """Ex√©cute une commande shell."""
    print(f"{Colors.OKCYAN}‚ñ∂Ô∏è  {cmd}{Colors.ENDC}")
    try:
        result = subprocess.run(
            cmd,
            shell=True,
            cwd=cwd,
            check=check,
            capture_output=True,
            text=True,
            encoding="utf-8",
            errors="ignore",
        )
        if result.stdout:
            print(result.stdout)
        return result
    except subprocess.CalledProcessError as e:
        print_error(f"Commande √©chou√©e: {e}")
        if e.stderr:
            print(e.stderr)
        if check:
            sys.exit(1)
        return e


def get_compose_command() -> str:
    """Retourne la commande docker compose disponible (plugin ou binaire legacy)."""
    # Pr√©f√®re le plugin `docker compose` si disponible
    try:
        result = subprocess.run("docker compose version", shell=True, check=False, capture_output=True, text=True)
        if result.returncode == 0:
            return "docker compose"
    except Exception:
        pass

    # Fallback vers l'ancien binaire docker-compose
    return "docker-compose"


def check_prerequisites():
    """V√©rifie les pr√©requis pour le d√©ploiement."""
    print_header("V√©rification des pr√©requis")

    prerequisites = []

    # Python
    if sys.version_info >= (3, 10):
        print_success(f"Python {sys.version.split()[0]} ‚úì")
        prerequisites.append(True)
    else:
        print_error("Python 3.10+ requis")
        prerequisites.append(False)

    # Git
    try:
        result = run_command("git --version", check=False)
        if result.returncode == 0:
            print_success("Git ‚úì")
            prerequisites.append(True)
        else:
            print_warning("Git non trouv√© (optionnel)")
            prerequisites.append(True)  # Non critique
    except:
        print_warning("Git non trouv√© (optionnel)")
        prerequisites.append(True)

    # Docker (pour d√©ploiement Docker)
    try:
        result = run_command("docker --version", check=False)
        if result.returncode == 0:
            print_success("Docker ‚úì")
            prerequisites.append(True)
        else:
            print_warning("Docker non trouv√© (requis pour d√©ploiement Docker)")
            prerequisites.append(False)
    except:
        print_warning("Docker non trouv√© (requis pour d√©ploiement Docker)")
        prerequisites.append(False)

    return all(prerequisites)


def validate_project_structure():
    """Valide la structure du projet."""
    print_header("Validation de la structure du projet")

    required_files = [
        "src/ui/app.py",
        "src/auth/auth.py",
        "src/ai/chatbot.py",
        "src/data/database.py",
        "requirements/requirements.txt",
    ]

    optional_files = ["docker/Dockerfile", "docker/docker-compose.yml", ".env", "docs/README.md"]

    missing_required = []
    for file_path in required_files:
        if Path(file_path).exists():
            print_success(f"{file_path} ‚úì")
        else:
            print_error(f"{file_path} MANQUANT")
            missing_required.append(file_path)

    print(f"\n{Colors.OKBLUE}üìÅ Fichiers optionnels:{Colors.ENDC}")
    for file_path in optional_files:
        if Path(file_path).exists():
            print_success(f"{file_path} ‚úì")
        else:
            print_warning(f"{file_path} non trouv√©")

    if missing_required:
        print_error(f"Fichiers manquants: {', '.join(missing_required)}")
        return False

    print_success("Structure du projet valid√©e !")
    return True


def run_tests_before_deploy():
    """Lance les tests avant d√©ploiement."""
    print_header("Tests avant d√©ploiement")

    # Tests unitaires
    print("üß™ Lancement des tests unitaires...")
    result = run_command("python -m pytest tests/ -v --tb=short", check=False)
    if result.returncode != 0:
        print_error("Tests unitaires √©chou√©s - d√©ploiement annul√©")
        return False

    # V√©rifications de qualit√©
    print("üîç V√©rifications de qualit√© du code...")
    quality_checks = [
        "python -m flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics",
        "python -m black --check src/ --quiet",
        "python -m isort --check-only src/ --quiet",
    ]

    for cmd in quality_checks:
        result = run_command(cmd, check=False)
        if result.returncode != 0:
            print_warning("V√©rifications de qualit√© √©chou√©es - continuons quand m√™me")
            break

    print_success("Tests r√©ussis !")
    return True


def resolve_env_file(environment: str) -> str | None:
    """D√©termine quel fichier d'environnement utiliser.

    Priorit√©: .env √† la racine si pr√©sent. Sinon, aucun --env-file n'est pass√©
    (docker compose utilisera les variables d'environnement du shell).
    """
    root_env = Path(".env")
    if root_env.exists():
        print_success("Fichier .env d√©tect√© ‚Äì utilis√© pour le d√©ploiement")
        return str(root_env)
    print_warning("Aucun fichier .env trouv√© ‚Äì les variables doivent provenir de l'environnement syst√®me")
    return None


def deploy_local(use_optimized: bool = False):
    """D√©ploiement local simple."""
    print_header("D√©ploiement local")

    if not validate_project_structure():
        return False

    # Installer/mettre √† jour les d√©pendances
    print("üì¶ Installation des d√©pendances...")
    run_command("pip install -r requirements/requirements.txt")

    # Lancer l'application
    app_file = "src/ui/app.py"  # Version modulaire (ex-refactored)

    if not Path(app_file).exists():
        print_error(f"Fichier d'application non trouv√©: {app_file}")
        return False

    print_success("D√©ploiement local pr√™t !")
    print(f"{Colors.OKBLUE}üöÄ Pour d√©marrer: streamlit run {app_file}{Colors.ENDC}")
    return True


def deploy_docker(environment: str = "production", build_only: bool = False):
    """D√©ploiement avec Docker."""
    print_header(f"D√©ploiement Docker ({environment})")

    if not validate_project_structure():
        return False

    # V√©rifier Docker
    try:
        run_command("docker --version")
    except:
        print_error("Docker n'est pas disponible")
        return False

    # V√©rifier la structure Docker existante
    if not Path("docker/Dockerfile").exists():
        print_error("Dockerfile manquant dans docker/")
        return False

    if not Path("docker/docker-compose.yml").exists():
        print_error("docker-compose.yml manquant dans docker/")
        return False

    # R√©soudre le fichier d'environnement
    env_file = resolve_env_file(environment)

    # Toujours arr√™ter proprement les √©ventuels conteneurs existants avant rebuild
    compose_file = "docker/docker-compose.yml"
    project_name = f"comparemodelpoc_{environment}"
    compose_cmd_base = get_compose_command()
    print("üßπ Arr√™t des conteneurs existants (compose down)...")
    down_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} down --remove-orphans"
    if env_file:
        down_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} --env-file {env_file} down --remove-orphans"
    run_command(down_cmd, check=False)

    # Construction via docker compose pour utiliser le docker-compose.yml existant
    compose_cmd_base = get_compose_command()
    print("üê≥ Construction des services (compose build)...")
    build_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} build"
    if env_file:
        build_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} --env-file {env_file} build"
    run_command(build_cmd)

    if build_only:
        print_success("Build compose termin√© avec succ√®s !")
        return True

    # Lancement avec Docker Compose
    print("üöÄ Lancement de l'application avec Docker Compose...")
    # Up avec rebuild et suppression des orphelins pour √©viter les conflits au redeploy
    up_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} up -d --build --remove-orphans"
    if env_file:
        up_cmd = f"{compose_cmd_base} -p {project_name} -f {compose_file} --env-file {env_file} up -d --build --remove-orphans"
    run_command(up_cmd)

    print_success("Application d√©ploy√©e avec Docker !")
    print(f"{Colors.OKBLUE}üåê Accessible sur: http://localhost:8501{Colors.ENDC}")
    print(f"{Colors.OKCYAN}üìã Logs: {compose_cmd_base} -f docker/docker-compose.yml logs -f{Colors.ENDC}")
    print(
        f"{Colors.OKCYAN}üõë Arr√™t: {compose_cmd_base} -p {project_name} -f docker/docker-compose.yml down --remove-orphans{Colors.ENDC}"
    )

    return True


def create_dockerfile():
    """Cr√©e un Dockerfile optimis√©."""
    dockerfile_content = """# üê≥ Dockerfile multi-stage optimis√© - DnD AI GameMaster

# Stage 1: Builder
FROM python:3.11-slim as builder

WORKDIR /app

# Installer les d√©pendances syst√®me
RUN apt-get update && apt-get install -y \\
    build-essential \\
    && rm -rf /var/lib/apt/lists/*

# Copier et installer les d√©pendances Python
COPY requirements/requirements.txt .
RUN pip install --no-cache-dir --user -r requirements/requirements.txt

# Stage 2: Runtime
FROM python:3.11-slim

# Cr√©er un utilisateur non-root
RUN useradd --create-home --shell /bin/bash dnduser

WORKDIR /app

# Copier les d√©pendances depuis le builder
COPY --from=builder /root/.local /home/dnduser/.local

# Copier le code source
COPY src/ ./src/
COPY *.py ./

# D√©finir les permissions
RUN chown -R dnduser:dnduser /app
USER dnduser

# Variables d'environnement
ENV PATH=/home/dnduser/.local/bin:$PATH
ENV PYTHONPATH=/app
ENV STREAMLIT_SERVER_PORT=8501
ENV STREAMLIT_SERVER_ADDRESS=0.0.0.0

# Port expos√©
EXPOSE 8501

# Health check
HEALTHCHECK --interval=30s --timeout=30s --start-period=5s --retries=3 \\
    CMD curl -f http://localhost:8501/_stcore/health || exit 1

# Commande par d√©faut
CMD ["streamlit", "run", "src/ui/app.py"]
"""

    with open("Dockerfile", "w") as f:
        f.write(dockerfile_content)

    print_success("Dockerfile cr√©√©")


def create_docker_compose():
    """Cr√©e un fichier docker-compose.yml."""
    compose_content = """version: '3.8'

services:
  dnd-gamemaster:
    build: .
    ports:
      - "8501:8501"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEEPSEEK_API_KEY=${DEEPSEEK_API_KEY}
    volumes:
      - ./database.db:/app/database.db
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Service optionnel : reverse proxy nginx
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - dnd-gamemaster
    restart: unless-stopped
    profiles:
      - with-nginx

volumes:
  app-data:
"""

    with open("docker-compose.yml", "w") as f:
        f.write(compose_content)

    print_success("docker-compose.yml cr√©√©")


def create_production_package():
    """Cr√©e un package de production."""
    print_header("Cr√©ation du package de production")

    # Cr√©er un dossier temporaire
    package_name = f"dnd-gamemaster-{datetime.now().strftime('%Y%m%d-%H%M%S')}"
    package_path = Path(f"dist/{package_name}")
    package_path.mkdir(parents=True, exist_ok=True)

    # Fichiers √† inclure
    files_to_include = [
        "src/",
        "requirements/requirements.txt",
        "run_app.py",
        "README.md",
        "docs/",
        "Dockerfile",
        "docker-compose.yml",
    ]

    print("üì¶ Copie des fichiers...")
    for item in files_to_include:
        src_path = Path(item)
        if src_path.exists():
            if src_path.is_dir():
                shutil.copytree(src_path, package_path / item, dirs_exist_ok=True)
            else:
                shutil.copy2(src_path, package_path / item)
            print_success(f"Copi√©: {item}")
        else:
            print_warning(f"Non trouv√©: {item}")

    # Cr√©er les scripts de d√©ploiement
    create_deployment_scripts(package_path)

    # Cr√©er l'archive
    archive_path = shutil.make_archive(f"dist/{package_name}", "zip", package_path)

    print_success(f"Package cr√©√©: {archive_path}")
    print(f"{Colors.OKBLUE}üì¶ Taille: {Path(archive_path).stat().st_size / 1024 / 1024:.1f} MB{Colors.ENDC}")

    return archive_path


def create_deployment_scripts(package_path: Path):
    """Cr√©e les scripts de d√©ploiement pour le package."""

    # Script de d√©ploiement rapide
    quick_deploy = """#!/bin/bash
# üöÄ Script de d√©ploiement rapide

echo "üé≤ D√©ploiement DnD AI GameMaster..."

# V√©rifier Docker
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

# Construire et lancer
docker-compose up --build -d

echo "‚úÖ Application d√©ploy√©e !"
echo "üåê Accessible sur: http://localhost:8501"
echo "üìã Logs: docker-compose logs -f"
echo "üõë Arr√™t: docker-compose down"
"""

    with open(package_path / "deploy.sh", "w") as f:
        f.write(quick_deploy)

    # Script Windows
    quick_deploy_bat = """@echo off
REM üöÄ Script de d√©ploiement rapide Windows

echo üé≤ D√©ploiement DnD AI GameMaster...

REM V√©rifier Docker
docker --version >nul 2>&1
if errorlevel 1 (
    echo ‚ùå Docker n'est pas install√©
    pause
    exit /b 1
)

REM Construire et lancer
docker-compose up --build -d

echo ‚úÖ Application d√©ploy√©e !
echo üåê Accessible sur: http://localhost:8501
echo üìã Logs: docker-compose logs -f
echo üõë Arr√™t: docker-compose down
pause
"""

    with open(package_path / "deploy.bat", "w") as f:
        f.write(quick_deploy_bat)

    print_success("Scripts de d√©ploiement cr√©√©s")


def stop_deployment(environment: str = "development"):
    """Arr√™te les d√©ploiements en cours."""
    print_header("Arr√™t des d√©ploiements")

    # Arr√™ter Docker Compose (utilise le m√™me fichier et projet que le d√©ploiement)
    compose_file = "docker/docker-compose.yml"
    project_name = f"comparemodelpoc_{environment}"
    if Path(compose_file).exists():
        print("üê≥ Arr√™t de Docker Compose...")
        compose_cmd_base = get_compose_command()
        run_command(f"{compose_cmd_base} -p {project_name} -f {compose_file} down --remove-orphans", check=False)

    # Arr√™ter les processus Streamlit
    try:
        if os.name == "nt":  # Windows
            run_command("taskkill /f /im streamlit.exe", check=False)
        else:  # Linux/Mac
            run_command("pkill -f streamlit", check=False)
        print_success("Processus Streamlit arr√™t√©s")
    except:
        print_warning("Aucun processus Streamlit trouv√©")


def main():
    """Fonction principale du script."""
    parser = argparse.ArgumentParser(
        description="üö¢ Script de d√©ploiement automatis√© - DnD AI GameMaster",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Exemples d'utilisation:
  python deploy.py check              # V√©rifier les pr√©requis
  python deploy.py local              # D√©ploiement local simple
  python deploy.py local --optimized  # Utilise la version optimis√©e
  python deploy.py docker             # D√©ploiement Docker
  python deploy.py docker --staging   # D√©ploiement staging
  python deploy.py package            # Cr√©er un package de production
  python deploy.py stop               # Arr√™ter tous les d√©ploiements
        """,
    )

    subparsers = parser.add_subparsers(dest="command", help="Commandes disponibles")

    # Commande check
    subparsers.add_parser("check", help="V√©rifie les pr√©requis de d√©ploiement")

    # Commande local
    local_parser = subparsers.add_parser("local", help="D√©ploiement local")
    local_parser.add_argument("--optimized", action="store_true", help="Utilise la version optimis√©e")
    local_parser.add_argument("--skip-tests", action="store_true", help="Ignore les tests")

    # Commande docker
    docker_parser = subparsers.add_parser("docker", help="D√©ploiement Docker")
    docker_parser.add_argument("--staging", action="store_true", help="Environnement staging")
    docker_parser.add_argument("--production", action="store_true", help="Environnement production")
    docker_parser.add_argument("--build-only", action="store_true", help="Construit seulement l'image")

    # Autres commandes
    subparsers.add_parser("package", help="Cr√©e un package de production")
    subparsers.add_parser("stop", help="Arr√™te tous les d√©ploiements")

    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return

    print(f"{Colors.HEADER}üö¢ DnD AI GameMaster - Script de d√©ploiement{Colors.ENDC}")

    try:
        if args.command == "check":
            check_prerequisites()
            validate_project_structure()

        elif args.command == "local":
            if not args.skip_tests and not run_tests_before_deploy():
                return
            deploy_local(args.optimized)

        elif args.command == "docker":
            if args.staging:
                environment = "staging"
            elif args.production:
                environment = "production"
            else:
                environment = "development"

            deploy_docker(environment, args.build_only)

        elif args.command == "package":
            create_production_package()

        elif args.command == "stop":
            stop_deployment()

    except KeyboardInterrupt:
        print_warning("\nD√©ploiement interrompu par l'utilisateur")
        sys.exit(0)
    except Exception as e:
        print_error(f"Erreur de d√©ploiement: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
